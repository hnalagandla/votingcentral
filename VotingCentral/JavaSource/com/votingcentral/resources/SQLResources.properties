#
# polls table calls
#
get.all.active.polls=select * from polls where poll_privacy_level \= 'PUBLIC' and start_timestamp < SYSDATE() and end_timestamp > SYSDATE() and poll_status \!\= 'UNFINISHED' order by start_timestamp desc
get.featured.polls=select * from polls where poll_privacy_level \= 'PUBLIC' and poll_priority \= 10 and start_timestamp < SYSDATE() and end_timestamp > SYSDATE() and poll_status \= 'CONFIRMED' and poll_type \= 'POLL' order by create_timestamp desc limit ?
get.recently.ended.polls=select * from polls where poll_privacy_level \= 'PUBLIC' and end_timestamp < SYSDATE() and poll_status \!\= 'UNFINISHED' and poll_type \= 'POLL' order by end_timestamp desc limit ?
get.recently.started.polls=select * from polls where poll_privacy_level \= 'PUBLIC' and end_timestamp > SYSDATE() and start_timestamp < SYSDATE() and poll_status \!\= 'UNFINISHED' and poll_type \= 'POLL' order by start_timestamp desc limit ?
get.most.voted.polls=select * from polls where poll_status \= 'CONFIRMED' and poll_privacy_level \= 'PUBLIC' and start_timestamp < SYSDATE() and end_timestamp > SYSDATE() and poll_type \= 'POLL' order by  poll_total_votes desc limit ?
get.most.viewed.polls=select * from polls where poll_status \= 'CONFIRMED' and poll_privacy_level \= 'PUBLIC' and start_timestamp < SYSDATE() and end_timestamp > SYSDATE() and poll_type \= 'POLL' order by  views_count desc limit ?
get.distinct.categories=select distinct category from category
get.categories.by.type=select super_category from category where category_type \= ?
get.distinct.sub.categories=select distinct sub_category from category
get.pc.by.username=select * from personal_config where user_name \= ?
get.polls.created.by.loginname=select * from polls where user_id\=?
get.polls.by.userid.status=select * from polls where user_id\=? and poll_status\=?
get.polls.by.status=select * from polls where poll_status\=?
get.polls.by.type=select * from polls where poll_type\=?
get.polls.unfinished.less.than.max.retry.count=select * from polls where poll_status\='UNFINISHED' and (UNFINISHED_POLL_REMINDER_COUNT is null || UNFINISHED_POLL_REMINDER_COUNT <\= ?)
get.confirmed.polls.created.by.loginname=select * from polls where user_id\=? and poll_status \!\= 'CREATED'
get.polls.by.super.category=select * from polls where super_category\=?
create.new.poll=insert into polls values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )
update.poll.by.pollid=update polls set poll_id\=?, master_poll_id\=?, user_id\=?, poll_type\=?, poll_name\=?, poll_desc\=?, poll_privacy_level\=?, poll_priority\=?, poll_keywords\=?, poll_category1\=?, poll_category2\=?, poll_category3\=?, poll_total_votes\=?, poll_status\=?, poll_data\=?, create_timestamp\=?, modify_timestamp\=?, start_timestamp\=?, end_timestamp\=?, expire_timestamp\=?, block_out_period_ms\=?, views_count \= ?, poll_started_email_sent\=?, unfinished_poll_reminder_count\=?, ufp_reminder_last_sent_timestamp\=? where poll_id\=?
get.poll.by.pollid=select * from polls where poll_id\=?
set.poll.status=update polls set poll_status\=?, modify_timestamp\=SYSDATE() where poll_id\=?
increment.viewed.count.by.poll.id=update polls set views_count \= views_count + ? where poll_id \= ? 
get.next.poll.id=SELECT poll_priority, poll_id FROM polls WHERE poll_type \= 'POLL' and end_timestamp > SYSDATE()  and poll_id NOT IN (SELECT poll_id FROM poll_user_history WHERE user_id \= ?) ORDER BY poll_priority DESC
get.polls.by.category=select * from polls where expire_timestamp > SYSDATE() and poll_category1 \=? and poll_status \!\= 'UNFINISHED' and start_timestamp < SYSDATE() order by start_timestamp desc limit ? 
get.polls.by.category.before.last.poll.end.time=select * from polls where expire_timestamp > SYSDATE() and poll_category1 \=? and end_timestamp > ? poll_status \!\= 'UNFINISHED' order by end_timestamp desc limit ? 
get.polls.by.sub.category=select * from polls where sub_category\=?
set.poll.priority.by.poll.id=update polls set poll_priority\=?, modify_timestamp\=SYSDATE() where poll_id\=?
set.poll.started.status.by.poll.id=update polls set poll_started_email_sent\=?, modify_timestamp\=SYSDATE() where poll_id\=?
set.poll.unfinished.poll.reminder.sent.now=update polls set modify_timestamp\=SYSDATE(), unfinished_poll_reminder_count \= unfinished_poll_reminder_count + 1, ufp_reminder_last_sent_timestamp\=SYSDATE() where poll_id\=?

get.repeated.polls=select * from polls where poll_repeated_id \!\= null
set.vcuser.account.status.by.username=update vc_user set account_status\=?, modify_timestamp\=? where user_name\=?
get.repeated.polls.created.by.loginname=select * from polls where poll_repeated_id \!\= null and user_id\=?
get.all.ended.polls.ended.email.not.sent=select * from polls where end_timestamp < SYSDATE() and poll_status \!\= 'ENDEMAILSENT' and poll_status \= 'CONFIRMED' and poll_type \= 'POLL'
get.all.started.polls.started.email.not.sent=select * from polls where start_timestamp < SYSDATE() and poll_started_email_sent \= 0 and poll_status \= 'CONFIRMED'
set.poll.started.email.sent=update polls set poll_started_email_sent \=1, modify_timestamp\=SYSDATE() where poll_id\=?
delete.poll.by.poll.id=delete from polls where poll_id \= ?

#
# vc_user table calls
#
get.vcuser.by.username=select * from vc_user where user_name \= ?
insert.new.vc.user=INSERT INTO vc_user (first_name, last_name, middle_initial, middle_name, email_address, dob, mob, yob, gender, user_name, display_user_name, mailing_address1, mailing_address2, city, state, zip_code1, zip_code2, country, phone_country_code, phone_area_code, phone_num_1, phone_num_2, account_status, create_timestamp, modify_timestamp) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,?, SYSDATE(), SYSDATE())
update.vc.user=update vc_user set first_name\=?, last_name\=?, middle_initial\=?, middle_name\=?, email_address\=?, dob\=?, mob\=?, yob\=?, gender\=?, user_name\=?, display_user_name\=?, mailing_address1\=?, mailing_address2\=?, city\=?, state\=?, zip_code1\=?, zip_code2\=?, country\=?, phone_country_code\=?, phone_area_code\=?, phone_num_1\=?, phone_num_2\=?, account_status\=?, modify_timestamp\=SYSDATE() where user_id \= ?
get.vcuser.by.email.address=select * from vc_user where email_address \= ?
get.vcuser.by.email.address.id=select * from vc_user where user_id \= ?
set.vcuser.account.status.by.email=update vc_user set account_status\=?, modify_timestamp\=? where email_address\=?
get.all.poll.started.emailable.users=select * from vc_user where account_status \= 'CONFIRMED' and user_id not in (select user_id from vc_user_prefs where poll_started_email \= 2)
get.most.recently.joined.users=select * from vc_user where account_status \= 'CONFIRMED' order by create_timestamp desc limit ?
#
# personal_config table calls.
#
get.pc.by.user.id=select * from personal_config where user_id \= ?
set.personal.config.by.userid=update personal_config set enc_password \= ?, temp_password \= ?,  modify_timestamp\=SYSDATE() where user_id \= ?
insert.new.personal.config=insert into personal_config values (?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE())
#
# user_roles table calls.
#
add.user.role=insert into user_roles values (?,?)
delete.user.role=delete from user_roles where user_name \= ? and role_name \= ?
get.roles.by.user=select * from user_roles where user_name \= ?

#
#
#vc_user_info table calls.
#
#
get.vcuser.info.by.user.id=select * from vc_user_info where user_id \= ?
insert.new.vc.user.info=insert into vc_user_info values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE(), ?, ?, ?, ?, ?, ?)
update.vc.user.info=update vc_user_info set profile_public\=?, race\=?, race_public\=?,  salary\=?, salary_public\=?, union_member\=?, um_public\=?, education\=?, education_public\=?, party_id\=?, party_public\=?, ideology\=?, ideology_public\=?, religion\=?, religion_public\=?, zodiac\=?, zodiac_public\=?,  marital_status\=?, marital_public\=?, children\=?, children_public\=?, smoke\=?, smoke_public\=?, drink\=?, drink_public\=?, favorite_quote\=?, url\=?, modify_timestamp \= SYSDATE(), sex_orient\=?, sex_orient_public\=?, about_me\=?, t_shirt_size\=?, t_shirt_size_public\=? where user_id \= ?  
insert.user.info.image.id=insert into vc_user_info (user_id, image_id, image_public) values (?, ?, ?)
update.user.info.image.id=update vc_user_info set image_id \= ?, image_public\=? where user_id \= ?
insert.user.info.profile.view.count=insert into vc_user_info (user_id, profile_view_count) values (?, 0)
increment.user.info.profile.view.count=update vc_user_info set profile_view_count \= profile_view_count + 1 where user_id \= ?
#
# poll_user_history table related.
#
#
#
create.vote.record=insert into poll_user_history(user_id, poll_id, question_id, answer_id, answer_text, user_ip_address, user_location_city, user_location_state, user_location_zip, user_location_country,  yob, gender, create_timestamp, modify_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE())
get.poll.user.history.by.user.poll=select * from poll_user_history where user_id\=? and poll_id\=?
get.poll.user.history.by.user.poll.time=select * from poll_user_history where user_id\=? and poll_id\=? order by modify_timestamp desc

get.votes.by.poll.id.question.id=select question_id, answer_id, "Unused" DISTRIBUTION_TYPE, count(*) votes from poll_user_history where poll_id \= ? and question_id \= ? group by question_id, answer_id
get.poll.user.history.by.age=SELECT question_id, answer_id, yob DISTRIBUTION_TYPE, count(*) votes FROM poll_user_history WHERE poll_id \= ? and question_id \= ? GROUP BY question_id, answer_id, DISTRIBUTION_TYPE ORDER BY DISTRIBUTION_TYPE
get.poll.user.history.by.gender=SELECT question_id, answer_id, gender DISTRIBUTION_TYPE, count(*) votes FROM poll_user_history WHERE poll_id \= ? and question_id \= ? GROUP BY question_id, answer_id, DISTRIBUTION_TYPE
#get.poll.user.history.by.time=SELECT question_id, answer_id, YEAR(create_timestamp)DT1, MONTH(create_timestamp) DT2, count(*) votes FROM poll_user_history WHERE poll_id \= ? and question_id \= ? GROUP BY question_id, answer_id, DT1, DT2
get.poll.user.history.by.time=SELECT ph.question_id, ph.answer_id, year(ph.create_timestamp)DT1, MONTH(ph.create_timestamp) DT2,Day(ph.create_timestamp) DT3, count(*) votes FROM poll_user_history ph WHERE ph.poll_id \= ? and ph.question_id \= ? GROUP BY question_id, answer_id, DT1, DT2, DT3
get.poll.user.history.by.location.city=SELECT question_id, answer_id, user_location_city DISTRIBUTION_TYPE, count(*) votes FROM poll_user_history WHERE poll_id \= ? and question_id \= ? GROUP BY question_id, answer_id, DISTRIBUTION_TYPE
get.votes.by.poll.id.question.id.all.data=SELECT * FROM poll_user_history WHERE poll_id \= ? and question_id \= ? 

distinct.voted.locations=SELECT distinct(user_location_city) disttype FROM poll_user_history WHERE poll_id \= ? ORDER BY disttype
chart.data.by.location=SELECT answer_id, user_location_city disttype, count(*) votes FROM poll_user_history WHERE poll_id \= ? GROUP BY answer_id, user_location_city
distinct.voted.gender=SELECT distinct(gender) disttype FROM vc_user ORDER BY disttype
chart.data.by.gender=SELECT itab.poll_id, itab.answer_id, itab.gender disttype, count(*) votes FROM (SELECT ph.poll_id poll_id, ph.answer_id answer_id, vu.gender gender FROM poll_user_history ph, vc_user vu WHERE ph.user_id \= vu.user_id) itab WHERE itab.poll_id \= ? GROUP BY answer_id, disttype
#chart.data.by.age=SELECT itab.poll_id, itab.answer_id, itab.age disttype, count(*) votes FROM (SELECT ph.poll_id poll_id, ph.answer_id answer_id, ph.age_range age FROM poll_user_history ph, vc_user vu WHERE ph.user_id \= vu.user_id) itab WHERE itab.poll_id \= ? GROUP BY answer_id, disttype

has.user.voted.by.email.address.id=select * from poll_user_history where user_id\=? and poll_id\=?
delete.votes.by.pollid=delete from poll_user_history where poll_id \= ?
#
# category table calls
#
get.distinct.super.categories=select distinct super_category from category
search.for.text.in.poll.headline.src=select * from polls where match (poll_headline_source) against (?)
get.category.by.category.name=select * from category where super_category\=?
#
# country table calls
#
get.all.countries=select * from countries order by name

#
# message table
#
get.messages.by.subject.id=SELECT * FROM message WHERE subject_id \= ?
get.message.by.message.id=SELECT * FROM message m, vc_user v WHERE m.creator_email_id \= v.user_id AND message_id \= ?
insert.new.message=INSERT INTO message (message_id, subject_id, message, response_to_id, creator_email_id, creator_ip_address, filter_ind, create_timestamp, modify_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
delete.message=DELETE FROM message WHERE message_id\=?
soft.delete.message=UPDATE message SET filter_ind\='Y', modify_timestamp\=SYSDATE() WHERE message_id\=?
update.message=UPDATE message SET message\=?, modify_timestamp\=SYSDATE() WHERE message_id\=?

#
# message board table
#
insert.new.message.board=INSERT INTO message_board (message_board_id, creator_email_id, create_timestamp, modify_timestamp, msg_board_start_timestamp, msg_board_end_timestamp) VALUES (?,?,?,?,?,?)

#
# subject_board table
#
get.subjects.by.subject.id=SELECT message_board_id, subject, file_id FROM subject_board WHERE subject_id \= ?
get.messageboard.by.mb.id=SELECT subject_id, subject, creator_email_id, create_timestamp FROM subject_board WHERE message_board_id \= ? AND filter_ind <>'Y'
get.messageboard.summary.by.mb.id=SELECT message.subject_id, msgSummary.messagecount, msgSummary.lastpostdate, vc_user.email_address lastpostuser FROM message, vc_user, (SELECT subject_id, count(1) messagecount, max(create_timestamp) lastpostdate FROM message GROUP BY subject_id ) msgSummary WHERE message.subject_id \= msgSummary.subject_id AND message.create_timestamp \= msgSummary.lastpostdate AND vc_user.user_id \= message.creator_email_id AND message.subject_id IN (SELECT subject_id FROM subject_board WHERE message_board_id \= ? AND filter_ind <> 'Y') ORDER BY msgSummary.lastpostdate DESC
insert.new.subject=INSERT INTO subject_board(subject_id, message_board_id, subject, file_id, creator_email_id, creator_ip_address, creator_location, filter_ind) values (?,?,?,?,?,?,?,'N')
archive.subject=UPDATE subject_board SET filter_ind \= 'Y' WHERE subject_id\=?

#
# message board files
#
get.message.board.files.by.message.id=select * from message_board_files where message_id \= ?
add.message.board.files.by.message.id=insert into message_board_files (message_id, file_name, mime_type, file_content, create_timestamp, modify_timestamp ) values (?, ?, ?, ?, ?, ?)
update.message.board.files.by.message.id=update message_board_files set message_id \= ?, file_name \= ?, mime_type \= ?, mime_name \= ?, file_content \= ?, modify_timestamp \= ? where message_id \= ?


#
# taf_log table calls. 
#
save.taf.log=insert into taf_log (sender_ip_address, sender_email_address, receiver_email_address, taf_url, taf_type, taf_sent_timestamp) values (?,?,?,?,?,SYSDATE())
get.taf.requests.count.by.requestor.receiver.and.past.hours=select count(*) TOTAL from taf_log where sender_email_address \= ? and receiver_email_address\=? and taf_sent_timestamp > SUBDATE(SYSDATE(), INTERVAL ? HOUR)
get.most.emailed.polls=select taf_url, count(*) as total from taf_log where taf_type \= 0 group by taf_url order by total desc limit ?
delete.taf.entries.by.pollid=delete from taf_log where taf_url \= ? and taf_type \= 0
#
# contest entries
#
#
get.contest.entry.by.file.id=select * from contest_entries where entry_file_id\=?
get.contest.entries.by.contest.type.and.file.status=select * from contest_entries where contest_type\=? and entry_file_status\=?
get.contest.entries.by.contest.type.file.status.user.id=select * from contest_entries where contest_type\=? and entry_file_status\=? and user_id \= ?
#creates a temp table and then queries for the data.
get.oldest.n.number.of.contest.entries.by.contest.type.file.status=SELECT * from contest_entries a, (select user_id, min(create_timestamp) min_date from contest_entries WHERE entry_file_status \= ? AND contest_type \= ? group by user_id) b WHERE a.user_id \= b.user_id AND a.create_timestamp \= b.min_date AND a.entry_file_status \= ? AND a.contest_type \= ? limit ?
add.contest.entry=insert into contest_entries values (?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE())
update.contest.entry.by.file.id=update contest_entries set entry_file_id\=?, user_id\=?, poll_id\=?, user_comments\=?, contest_type\=?, entry_file_status\=?,  modify_timestamp\=SYSDATE() where entry_file_id\=?
update.contest.entry.status.by.file.id=update contest_entries set entry_file_status\=?, modify_timestamp\=SYSDATE() where entry_file_id\=?
get.contest.entries.by.file.status=select * from contest_entries where entry_file_status\=? order by contest_type
get.contest.entries.not.in.user.id.by.type=select * from contest_entries where user_id \!\= ? and contest_type \= ? and entry_file_status \= 'APPROVED' order by create_timestamp desc limit ?
delete.contest.entries.by.pollid=delete from contest_entries where poll_id \= ?
#
# VC files
#
#
get.vc.file.by.file.id=select * from vc_files where file_id\=?
add.vc.file=insert into vc_files values (?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE())
update.vc.file.by.file.id=update vc_files set file_id\=?, user_id\=?, file_type\=?, file_name\=?, file_mime_type\=?, file_content\=?, modify_timestamp\=SYSDATE() where file_id\=?
delete.vc.file.by.file.id=delete from vc_files where file_id\=?
#
# my voting central related queries
#
get.polls.created.by.user.id.limit.count.time=select * from polls where user_id \= ? and create_timestamp > ? and poll_status \!\= 'UNFINISHED' order by create_timestamp desc limit ?
get.polls.created.by.user.id.limit.time=select * from polls where user_id \= ? and create_timestamp > ?  and poll_status \!\= 'UNFINISHED'  order by create_timestamp desc 
get.polls.voted.by.user.id.limit.count.time=select * from poll_user_history where user_id \= ? and create_timestamp > ?  order by create_timestamp desc limit ?
get.polls.voted.by.user.id.limit.time=select * from poll_user_history where user_id \= ? and create_timestamp > ?  order by create_timestamp desc 
get.contest.entries.uploaded.by.user.id.limit.count.time=select * from contest_entries where user_id \= ? and create_timestamp > ?  order by create_timestamp desc limit ?
get.contest.entries.uploaded.by.user.id.limit.time=select * from contest_entries where user_id \= ? and create_timestamp > ?  order by create_timestamp desc 
get.distinct.message.board.polls.by.user.id.limit.count.time=select distinct(message_board_id) from subject_board where subject_id in (select distinct (subject_id) from message where creator_email_id \= ?) and creator_email_id \= ? and create_timestamp > ? limit ?
get.distinct.message.board.polls.by.user.id.limit.time=select distinct(message_board_id) from subject_board where subject_id in (select distinct (subject_id) from message where creator_email_id \= ?) and creator_email_id \= ? and create_timestamp > ?


#
#
#
#the following searches require FULLTEXT index created for each unique
#match combination.
#ALTER TABLE vc_content ADD FULLTEXT (content)
#FULLTEXT (content) for match ("string")
search.for.text=select * from vc_content where match (content) against (?) and id > ?
insert.into.vccontent=insert into vc_content (table_name, column_name, where_id1, where_value1, where_id2, where_value2, where_id3, where_value3, content, create_timestamp, modify_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE())
delete.from.vccontent=This is automatically generated in the code.
update.vccontent=This is automatically generated in the code.


#
#States table
#
get.states.for.country=select * from states where country_id \= ?
get.state.by.state.code=select * from states where code \= ?
get.fips.10_4.state.by.country.code.and.state.code=select * from fips_10_4 where country_code\=? and state_number\=?
get.fips.states.for.country=select * from fips_10_4 where country_code \= ?
get.fips.10_4.state.by.state.name=select * from fips_10_4 where state_name\=?
#
#Poll Comments table
#
#
get.comments.by.pollid=select * from poll_comments where poll_id \= ? order by create_timestamp desc
get.comments.by.pollid.and.userid=select * from poll_comments where poll_id \= ? and user_id \= ?
insert.into.comment.for.poll=insert into poll_comments (poll_id, comment_text, user_name, user_id, user_ip_address, filter_ind, create_timestamp, modify_timestamp) values (?, ?, ?, ? ,? , ?, SYSDATE(), SYSDATE())
get.comments.by.user=select * from poll_comments where creator_email \= ? order by create_timestamp desc
get.poll.comments.by.user.id.limit.count.time=select distinct(poll_id) from poll_comments where user_id \= ? and create_timestamp > ? order by create_timestamp desc limit ?
get.poll.comments.by.user.id.limit.time=select distinct(poll_id) from poll_comments where user_id \= ? and create_timestamp > ? order by create_timestamp desc 
delete.comments.by.pollid=delete from poll_comments where poll_id\=?

#
# mail table related.
#
#
#
create.mail.record.with.delay=insert into mail(type_id, from_address, to_address, cc_address, bcc_address, subject, reply_address, content, retry_count, start_timestamp,  success_timestamp, last_retry_timestamp, next_retry_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, 0, SYSDATE(), '0000-00-00 00\:00\:00', '0000-00-00 00\:00\:00', (SELECT ADDDATE(SYSDATE(), INTERVAL ? MINUTE)))
create.mail.record=insert into mail(type_id, from_address, to_address, cc_address, bcc_address, subject, reply_address, content, retry_count, start_timestamp,  success_timestamp, last_retry_timestamp, next_retry_timestamp) values (?, ?, ?, ?, ?, ?, ?, ?, 0, SYSDATE(), '0000-00-00 00\:00\:00', '0000-00-00 00\:00\:00', '0000-00-00 00\:00\:00')
get.unsent.emails=select * from mail where success_timestamp \= '0000-00-00 00\:00\:00' and retry_count < ? and start_timestamp > ? and next_retry_timestamp < sysdate()
# when sending fails, reschedule it for the next day.
update.when.send.failed=update mail set retry_count \= retry_count + 1, last_retry_timestamp \= SYSDATE(), next_retry_timestamp \= (SELECT ADDDATE(SYSDATE(), INTERVAL ? MINUTE)) where mail_id \= ?
update.when.send.success=update mail set last_retry_timestamp \= SYSDATE(),  success_timestamp \= SYSDATE() where mail_id \= ?
delete.when.send.failed=delete from mail where mail_id \= ?

#
# vc user links table.
#
insert.into.vc.user.links=insert into vc_user_links (source_user_id, source_user_email, source_user_name, dest_user_id, dest_user_email, dest_user_name, link_state, create_timestamp, modify_timestamp, link_comments, accept_code, reject_code) values (?, ?, ?, ?, ?, ?, ?, SYSDATE(), SYSDATE(), ?, ?, ?)
update.into.vc.user.links=update vc_user_links  set dest_user_id\=?, dest_user_email\=?, dest_user_name\=?, link_state\=?,  modify_timestamp\=SYSDATE() where link_id\=? 
get.direct.link.by.user.name=select * from vc_user_links where (source_user_name \= ? and dest_user_name \= ?) or (source_user_name \= ? and dest_user_name \= ?)
get.direct.link.by.user.id=select * from vc_user_links where (source_user_id \= ? and dest_user_id \= ?) or (source_user_id \= ? and dest_user_id \= ?)
get.direct.link.by.email=select * from vc_user_links where (source_user_email \= ? and dest_user_email \= ?) or (source_user_email \= ? and dest_user_email \= ?)
get.direct.link.by.accept.or.reject.code=SELECT * FROM vc_user_links where accept_code \= ? or reject_code \= ?
get.accepted.links.by.userid=select * from vc_user_links where (source_user_id \= ? or dest_user_id \= ?) and link_state\=1
get.all.links.by.userid=select * from vc_user_links where (source_user_id \= ? or dest_user_id \= ?)
get.pending.links.recieved.by.userid=select * from vc_user_links where dest_user_id \= ? and link_state\=0
get.pending.links.requested.by.userid=select * from vc_user_links where source_user_id \= ? and link_state\=0
#
#vaco points
#
insert.into.vc.vaco.points=insert into vc_vaco_points (user_id, points, create_timestamp, modify_timestamp) values (?, ?, SYSDATE(), SYSDATE())
get.vaco.points.by.user.id.from.and.to=select * from vc_vaco_points where user_id \= ? and modify_timestamp > ? and  modify_timestamp < ?
get.all.vaco.points.by.user.id=select * from vc_vaco_points where user_id \= ?
update.vc.vaco.points=update vc_vaco_points set points \= ?, modify_timestamp \= SYSDATE() where points_id \= ? 
get.user.with.highest.points.during.period=select * from vc_vaco_points where modify_timestamp > ? and modify_timestamp < ? order by points desc limit 1
get.users.and.points.during.period=select * from vc_vaco_points where modify_timestamp > ? and modify_timestamp < ? 
#
# vc_winners
#
insert.into.vc.winners=insert into vc_winners (user_id, win_type_code, start_timestamp, end_timestamp, poll_id, create_timestamp) values (?, ?, ?, ?, ?, SYSDATE())
get.last.winner.by.type=select * from vc_winners where win_type_code \= ? order by end_timestamp desc limit 1
get.all.winners=select * from vc_winners order by create_timestamp desc limit ?
get.winner.by.time.range=select * from vc_winners where start_timestamp \= ? and end_timestamp \= ? and win_type_code \= ?

#
#
#vc_user_prefs table calls.
#
#
get.vcuser.prefs.by.user.id=select * from vc_user_prefs where user_id \= ?
insert.new.vc.user.prefs=insert into vc_user_prefs (user_id, poll_started_email, create_timestamp, modify_timestamp) values (?, ?, SYSDATE(), SYSDATE())
update.vc.user.prefs=update vc_user_prefs set poll_started_email\=?, modify_timestamp \= SYSDATE() where user_id \= ?  

# vc_parameter table
get.parameter.by.name=select * from vc_parameter where parameter_name \= ?
update.parameter.by.name=update vc_parameter set parameter_value\=?, parameter_last_modified\=sysdate() where parameter_name\=?
insert.into.parameter=insert into vc_parameter (parameter_name, parameter_value, parameter_last_modified) values(?, ?, sysdate())
